]]]]]]]]]]destructuring assignement

I] definition

JavaScript feature that allows you to extract values 
from arrays or objects and assign them to variables 
in a more concise and readable way. 

]*******************************************************

II] Destructuring from Objects:

]jsx code ex:

]define the const - objects

const person = {
  firstName: "John",  ]// object1 = firstName
  lastName: "Doe",    ]// object2 = lastName
};

]create a function to assign

function MyComponent() {

  ] extract object1 and object2's values ("John" "Doe")
   using a destructuring assignement ===

  const { firstName, lastName } = person;

  ]assigne the output features

  return (
    <div>
      <p>{firstName}</p>
      <p>{lastName}</p>
    </div>
  );

}

]sum up 

const person = {
  firstName: "John", 
  lastName: "Doe",    
};
|__ const{firstName,lastName}=person;


]other example:

const obj = {
    a:{
        one:1,
        two:2,
    }
}
|__ const obj {a:{one,two}} = obj;


] ********************************************

III] Destructuring from Arrays:

]jsx code ex:

]define the const - array

const numbers = [1, 2, 3, 4, 5];


]create a function to apply to the interface 

function MyComponent() {

] extract and reassigne values ex: 1 value = first 
  using a destructuring assignement
 
  
  const [first, second, ...rest] = numbers;

  ]//** ...rest  captures the rest of the elements in a new array.

    console.log(first);  // 1
    console.log(second); // 2
    console.log(rest);   // [3, 4, 5]

 ]assigne the output features
  return (
    <div>
      <p>First: {first}</p>
      <p>Second: {second}</p>
      <p>Rest: {rest.join(', ')}</p>
    </div>
  );
}
]//**join(', ') converts the array elements into a single string
 where the elements are separated by the specified delimiter. 
 In this case, ', ' is the delimiter, which means
  that the array elements will be joined together with
  a comma ,  followed by a space between each element.

  console.log(rest.join(', ')); // "3, 4, 5"

  ]other example 

const arr = [
    {
        a:1,
        b:2
    }
];
|__const [{a,b}] = arr; 


]****************************************************

IV] Destructuring from arrow function 

]definition :
functional components / class component methods
often used for event handlers or callback functions

]code example

const person = {
  firstName: "John",
  lastName: "Doe",
};

]// Using a regular function

const getFullName = (p) => {
  const { firstName, lastName } = p;
  return `${firstName} ${lastName}`;
};

console.log(getFullName(person)); // Output: "John Doe"

]// Using an arrow function with destructuring

const getFullNameArrow = ({ firstName, lastName }) => `${firstName} ${lastName}`;

console.log(getFullNameArrow(person)); // Output: "John Doe"

]sum up

const getFullName = (p) => {
  const { firstName, lastName } = p;
  return `${firstName} ${lastName}`;
};
|___ const getFullName = ({ firstName, lastName }) => `${firstName} ${lastName}`;

]************************************************************************

V] destructuring assignement from props

]definition

mechanism for passing data from a parent component
to a child component.


]// original assignement-- functional component

export const MyComponent = (props) => {
  return (
    <div>
      <p>Prop 1: {props.prop1}</p>
      <p>Prop 2: {props.prop2}</p>
    </div>
  );
};

]//destructuring assignement

export const MyComponent = ({ prop1, prop2 }) => {
  return (
    <div>
      <p>Prop 1: {prop1}</p>
      <p>Prop 2: {prop2}</p>
    </div>
  );
};







//




fragment tag (instead of div to embrace as a parent tag inside the const to respect jsx)

